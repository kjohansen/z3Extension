############################################################
#   Authors: kris johansen, Jaeseong Lee                   #
#   *CS520*                                                #
############################################################


;;;;;;;;;;;;;;;;;;;;;;; START ANALYZE ;;;;;;;;;;;;;;;;;;;;;;;
STEP 1, The main point of this problem is to figure out if there is an error occurred due to overflow using bit vector since z3 can't catch the error using regular int instance.
Z3 will find the data set that returns different results from the original and the mutant with same input value.
First we need to settle the preconditions of 20th and 33rd line of the code.
(assert (not line-20-cond)) ; if (a <= 0 || b <= 0 || c <= 0) should return false to avoid to return Type.INVALID.
(assert line-33-cond)  if (trian == 0) should return true to go through the if statement we wants to test.

STEP 2, The difference between the Mutant and Original is an logical operation.
when we declare 'a + b <= c' as "A", 'a + c <= b' as "B" and 'b + c <= a' as "C", we need to find a combination of the Boolean expression to result different outputs.
First case, that original code returns TRUE from (A || B || C) and the mutant code returns FALSE from ((A xor B) or C).
  => A, B and C should be TRUE, TRUE and FALSE.
Second case, that original code returns FALSE from (A || B || C) and the mutant code returns TRUE from ((A xor B) or C).
  => A, B and C should be FALSE, FALSE and FALSE.

STEP 3, the Next, (assert (= mutated-condition (or (or (and (not (bvsle a-plus-c b)) (bvsle a-plus-b c))(and (bvsle a-plus-c b)(not(bvsle a-plus-b c))))(bvsle b-plus-c a))))
This is equivalent with "Boolean mutated-condition =((A && ^B) ||(^A && B) || C)" which is "(A xor B) or C"

STEP 4, And then the last step is to assign ;; (assert (= initial-condition line-34-cond)).
Finally, Z3 solver will find the case when mutated-condition != initial-condition ;; (assert (not(= mutated-condition initial-condition))).
The result shows below
```(define-fun c () (_ BitVec 8)
  #x30)
(define-fun a () (_ BitVec 8)
  #x5a)
(define-fun b () (_ BitVec 8)
  #x37)
(define-fun mutated-condition () bool
  false)
(define-fun initial-condition () bool
  true)```
so its clearly saying when a=x5a, b=x37 and c=x30, mutated condition is false and initial condition is true.
Additionally, the reason why this happens is that the range or the 2's complement is -128 to 127 and first bit of the octet decides whether if the value is negative or positive value.
when I convert the a,b and c values into the decimal a, b and c has a value of 90, 55 and 48.
So, if we simply plug in these values to the each if-statement from mutant and original,
(90 + 55 is greater than 127 so considered as a negative value) =< 48 returns TRUE,
(90 + 48 is greater than 127 so considered as a negative value) =< 55 returns TRUE,
(48 + 55 IS less than 127 so considered as a positive value) =< 90 returns FALSE.
It does totally make sense why z3 returns mutated condition as false and initial condition as true with the reason that I mentioned above in STEP 2.
There are STUDENT CODE and OUTPUT below.
;;;;;;;;;;;;;;;;;;;;;;; END ANALYZE ;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;; START STUDENT CODE ;;;;;;;;;;;;;;;
(assert (not line-20-cond))
(assert line-33-cond)

(assert (= mutated-condition (or (or (and (not (bvsle a-plus-c b))
                                          (bvsle a-plus-b c))
                                     (and (bvsle a-plus-c b)
                                          (not(bvsle a-plus-b c))))
                                 (bvsle b-plus-c a))))

(assert (= initial-condition line-34-cond))
;;;;;;;;;;;;;;;;; END STUDENT CODE ;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;; START OUTPUT ;;;;;;;;;;;;;;;;;;;;;;;;
=================================== MUTANT 76 ==================================
sat
-------------------------------- Getting model ---------------------------------
(model
  (define-fun line-30-cond () bool
    false)
  (define-fun trian2 () Int
    0)
  (define-fun a-eq-c () bool
    false)
  (define-fun line-47-cond () bool
    false)
  (define-fun trian3 () Int
    0)
  (define-fun bv0 () (_ BitVec 8)
    #x00)
  (define-fun initial-condition () bool
    true)
  (define-fun line-20-cond () bool
    false)
  (define-fun bv3 () (_ BitVec 8)
    #x03)
  (define-fun line-45-cond () bool
    false)
  (define-fun b-plus-c () (_ BitVec 8)
    #x67)
  (define-fun bv1 () (_ BitVec 8)
    #x01)
  (define-fun a-plus-b () (_ BitVec 8)
    #x91)
  (define-fun a-plus-c () (_ BitVec 8)
    #x8a)
  (define-fun b-eq-c () bool
    false)
  (define-fun trian () Int
    0)
  (define-fun line-33-cond () bool
    true)
  (define-fun trian1 () Int
    0)
  (define-fun bv2 () (_ BitVec 8)
    #x02)
  (define-fun a-eq-b () bool
    false)
  (define-fun line-27-cond () bool
    false)
  (define-fun b () (_ BitVec 8)
    #x37)
  (define-fun mutated-condition () bool
    false)
  (define-fun a () (_ BitVec 8)
    #x5a)
  (define-fun line-40-cond () bool
    false)
  (define-fun line-34-cond () bool
    true)
  (define-fun line-24-cond () bool
    false)
  (define-fun c () (_ BitVec 8)
    #x30)
  (define-fun line-43-cond () bool
    false)
)
;;;;;;;;;;;;;;;;;;;;;; END OUTPUT ;;;;;;;;;;;;;;;;;;;;;;;;
